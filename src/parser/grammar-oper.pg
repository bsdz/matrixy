# TODO: We're going to be using a custom data type, MatrixyData, for all
#       data values. If we're using pirops, make sure all the operations are
#       supported by proper VTABLE definitions in the respective class files.

# TODO: Make sure this list covers all the important M operators, and does not
#       introduce any new weird operators that M does not support.

proto 'infix:or'       is precedence('1')     is pasttype('unless') { ... }
proto 'infix:and'      is tighter('infix:or') is pasttype('if')     { ... }

proto 'infix:<'        is tighter('infix:and')                      { ... }
proto 'infix:<='       is equiv('infix:<')                          { ... }
proto 'infix:>'        is equiv('infix:<')                          { ... }
proto 'infix:>='       is equiv('infix:<')                          { ... }
proto 'infix:=='       is equiv('infix:<')                          { ... }
proto 'infix:!='       is equiv('infix:<')                          { ... }

proto 'infix:+'        is tighter('infix:<')    is pirop('add')     { ... }
proto 'infix:-'        is equiv('infix:+')      is pirop('sub')     { ... }

# TODO: In M, string concatination is done with bracket syntax. The .. operator
#       is used instead to construct an iterator or an array. Fix this.
proto 'infix:..'       is equiv('infix:+')      is pirop('concat')  { ... }

proto 'infix:*'        is tighter('infix:+')    is pirop('mul')     { ... }
proto 'infix:%'        is equiv('infix:*')      is pirop('mod')     { ... }
proto 'infix:/'        is equiv('infix:*')      is pirop('div')     { ... }

proto 'prefix:not'     is tighter('infix:*')    is pirop('not')     { ... }
proto 'prefix:-'       is tighter('prefix:not') is pirop('neg')     { ... }

proto 'term:'          is tighter('prefix:-')    is parsed(&term)   { ... }